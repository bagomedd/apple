import {
    TVCarouselElement
}

from "../common/TVCarouselElement";

import {
    useState,
    useEffect,
    useRef
}

from "react";
import * as TVCarouselJson from "./TVCarousel.json";

export function TVCarousel() {
    const JSON_RECIEVED_INFO=TVCarouselJson.tvCarouselInfo;
    const CAROUSEL_MARGIN_LEFT=12;
    const ELEMENT_WIDTH=1250;
    const ELEMENTS_COUNT=10;

    const [choosenElement,
    setChoosenElement]=useState(4);
    const [offset,
    setOffset]=useState(-ELEMENT_WIDTH);
    const [elementsOffsets,
    setElementsOffsets]=useState<Array<number>>([]);
    // const [indexL, setIndexL] = useState(choosenElement - 4)
    // const [indexR, setIndexR] = useState(choosenElement + 5)
    //?

    //
    //
    const carousel=useRef<HTMLDivElement | null>(null);
    const carouselStyles=useRef<CSSStyleDeclaration | null>(null);
    //
    const carouselElements=useRef<Array<HTMLDivElement>>([]);
    const pushCarouselElements=(el: HTMLDivElement)=>carouselElements.current.push(el);
    const carouselElementsStyles=useRef<Array<CSSStyleDeclaration>>([]);
    // 
    const filters=useRef<Array<HTMLDivElement>>([]);
    const pushFilters=(el: HTMLDivElement)=>filters.current.push(el);
    const filtersStyles=useRef<Array<CSSStyleDeclaration>>([]);
    // 
    const moveDir=useRef<String>('-');

    const translateRight=(index: number)=> {
        console.log('TRANSLATE_RIGHT');

        setElementsOffsets(function (prev) {

                let ar=[];

                for (let i=0; i < prev.length; i++) {
                    if (i !=index) {
                        ar[i]=prev[i];
                    }

                    else {
                        ar[i]=prev[i] + (ELEMENTS_COUNT * (ELEMENT_WIDTH + CAROUSEL_MARGIN_LEFT))
                    }
                }

                return (ar);
            });
    }

    const translateLeft=(index: number)=> {
        setElementsOffsets(function (prev) {

                let ar=[];

                for (let i=0; i < prev.length; i++) {
                    if (i !=index) {
                        ar[i]=prev[i];
                    }

                    else {

                        ar[i]=prev[i] + (ELEMENTS_COUNT * (ELEMENT_WIDTH + CAROUSEL_MARGIN_LEFT))
                    }
                }

                return (ar);
            });
    }

    function calcIndexR() {
        let indexR=0;
        console.log('CHOOSEN_ELEMENT IS', choosenElement) // 4

        if (choosenElement + 5 < ELEMENTS_COUNT && choosenElement + 5 > 0) {
            indexR=choosenElement+5;
        }

        else {
            indexR=(choosenElement + 5 + ELEMENTS_COUNT) % ELEMENTS_COUNT
        }

        console.log('INDEX R IS', indexR); // 9
        // setIndexR(indexR);
        return indexR;
    }

    function calcIndexL() {
        let indexL=0;

        if (choosenElement - 4 > 0 && choosenElement - 4 < ELEMENTS_COUNT) {
            indexL=choosenElement - 4;
        }

        else {
            indexL=(choosenElement - 4 + ELEMENTS_COUNT) % ELEMENTS_COUNT
        }

        // setIndexL(indexL);
        return indexL;
    }

    let id=-1;

    let json_info=JSON_RECIEVED_INFO.map(function (imageUrl) {
            id +=1;
            return ([id, imageUrl.imageUrl, "carouselElements", "filters"])

        }) useEffect(()=> {
            console.log("useEffect [] is called");

            if (carousel.current) {
                carouselStyles.current=carousel.current !.style;
            }

            else {
                console.log("Carousel and CarouselStyles is null!");
            }

            if (carouselElements.current) {
                for (let i=0; i < ELEMENTS_COUNT; i++) {
                    if (carouselElements.current[i]) {

                        carouselElementsStyles.current ![i]=(carouselElements.current ![i] as HTMLElement).style
                    }

                    else {
                        console.log("CarouselELements" + i + " is null!")
                    }
                }
            }

            if (filters.current) {
                for (let i=0; i < ELEMENTS_COUNT; i++) {
                    if (filters.current ![i]) {
                        filtersStyles.current ![i]=(filters.current ![i] as HTMLElement).style
                    }

                    else {
                        console.log("Filters[" + i + "] is null!");
                    }
                }
            }

            // ASSIGNING  USEREFS



            for (let i=0; i < ELEMENTS_COUNT; i++) {
                if (i !=choosenElement + 1) {
                    filtersStyles.current ![i].filter="opacity(70%)";
                }

                else {
                    filtersStyles.current ![i].filter="opacity(0%)"
                }

                carouselStyles.current !=(carousel.current ! as HTMLElement).style;
                carouselElementsStyles.current ![i].minWidth=ELEMENT_WIDTH + "px";
                carouselElementsStyles.current ![i].maxWidth=ELEMENT_WIDTH + "px";
                carouselElementsStyles.current ![i].marginLeft="0px";
            }

            carouselStyles.current !.transition="margin-left 1s";

            let ar: Array<number>=[];

            for (let i=0; i < ELEMENTS_COUNT; i++) {
                ar.push(0);
            }

            setElementsOffsets(ar);
            setOffset(offset - 3 * (CAROUSEL_MARGIN_LEFT + ELEMENT_WIDTH));
            // 25.02 
            // ASSIGNEMENT CAROUSELELEMENTS WIDTH AND FINLTERS OPACITY AND TRANSITION
        }

        , []) useEffect(()=> {
            carouselStyles.current !.marginLeft=(offset - CAROUSEL_MARGIN_LEFT) + "px";
        }

        , [offset]) // MOVING CAROUSEL SCRIPT

    useEffect(()=> {
                {
                // filtersStyles.current![choosenElement].filter = "opacity(0%)";

                // if (choosenElement + 1 < ELEMENTS_COUNT) {

                //     filtersStyles.current![choosenElement + 1].filter = "opacity(70%)";
                // }
                // else {

                //     filtersStyles.current![(choosenElement + 1) % ELEMENTS_COUNT].filter = "opacity(70%)";
                // }
                // if (choosenElement - 1 > 0) {
                //     console.log(" 1. CE -1 IS ", choosenElement - 1)
                //     filtersStyles.current![choosenElement - 1].filter = "opacity(70%)";
                // }
                // else {
                //     console.log(" 2. CE -1 IS ", choosenElement - 1)
                //     filtersStyles.current![(choosenElement - 1) + ELEMENTS_COUNT].filter = "opacity(70%)";
                // }

                // let indexR = 0;
                // let indexL = 0;
                // if (choosenElement + 5 < ELEMENTS_COUNT && choosenElement + 5 > 0) {
                //     indexR = choosenElement + 5;
                // }
                // else {
                //     indexR = (choosenElement + 5 + ELEMENTS_COUNT) % ELEMENTS_COUNT
                // }
                // if (choosenElement - 4 > 0 && choosenElement - 4 < ELEMENTS_COUNT) {

                //     indexL = choosenElement - 4;
                // }
                // else {
                //     indexL = (choosenElement - 4 + ELEMENTS_COUNT) % ELEMENTS_COUNT
                // }

                // console.log("choosen element is ", choosenElement, "indexR is ", indexR, "indexL is ", indexL)

                // carouselElementsStyles.current![indexR].transform = "translate(" + (ELEMENTS_COUNT - 1) * (ELEMENT_WIDTH + CAROUSEL_MARGIN_LEFT) + "px,0px)";
                // carouselElementsStyles.current![indexL].transform = "translate(" + -(ELEMENTS_COUNT - 1) * (ELEMENT_WIDTH + CAROUSEL_MARGIN_LEFT) + "px,0px)";
            }

            if (moveDir.current !='r') {
                translateRight(choosenElement);
            }

            if (moveDir.current !='l') {
                translateLeft(choosenElement);
            }

            else {
                console.log('MOVE_DIR_IS_NOT_L_OR_R');
            }
        }

        , [choosenElement]) // CHANGING FILTERS OPACITY WHEN MOVING

    useEffect(()=> {

            // console.log(elementsOffsets);
            if (moveDir.current !=='l') {
                // let indexR = 0;
                // if (choosenElement + 5 < ELEMENTS_COUNT && choosenElement + 5 >= 0) {
                //     indexR = choosenElement + 5;
                // }
                // else {
                //     indexR = (choosenElement + 5 + ELEMENTS_COUNT) % ELEMENTS_COUNT
                // }
                let indexR=calcIndexR();
                carouselElementsStyles.current ![indexR].transform="translate(" + (elementsOffsets[indexR] - (ELEMENTS_COUNT) * (CAROUSEL_MARGIN_LEFT + ELEMENT_WIDTH)) + "px,0px)";
            }

            if (moveDir.current !=='r') {
                // let indexL = 0;
                // if (choosenElement - 4 >= 0 && choosenElement - 4 < ELEMENTS_COUNT) {
                //     indexL = choosenElement - 4;
                // }
                // else {
                //     indexL = (choosenElement - 4 + ELEMENTS_COUNT) % ELEMENTS_COUNT
                // }
                let indexL=calcIndexL();
                carouselElementsStyles.current ![indexL].transform="translate(" + (elementsOffsets[indexL] + (ELEMENTS_COUNT) * (CAROUSEL_MARGIN_LEFT + ELEMENT_WIDTH)) + "px,0px)";

            }
        }

        , [elementsOffsets]) // useEffect(() => {
    //     console.log('USEEFFECT_INDEX_R')
    //     translateRight(indexR);
    // }, [indexR]);

    // useEffect(() => {
    //     translateLeft(indexL);
    // }, [indexL]);

    function handleLeftArrowClick() {
        setOffset(offset + ELEMENT_WIDTH + CAROUSEL_MARGIN_LEFT);
        /*
        // let indexR = 0;
        // if (choosenElement + 5 < ELEMENTS_COUNT && choosenElement + 5 > 0) {
            //     indexR = choosenElement + 5;
            // }
            // else {
                //     indexR = (choosenElement + 5 + ELEMENTS_COUNT) % ELEMENTS_COUNT
                // }
                */
        moveDir.current !='l';

        /* 
        // translateLeft();
        */
        if (choosenElement - 1 > 0) {
            setChoosenElement(choosenElement - 1);
        }

        else {
            setChoosenElement(choosenElement - 1 + ELEMENTS_COUNT);
        }


    }

    function handleRightArrowClick() {
        setOffset(offset - ELEMENT_WIDTH - CAROUSEL_MARGIN_LEFT);
        /*
            // let indexL = 0;
            // if (choosenElement - 4 > 0 && choosenElement - 4 < ELEMENTS_COUNT) {
            //     indexL = choosenElement - 4;
            // }
            // else {
            //     indexL = (choosenElement - 4 + ELEMENTS_COUNT) % ELEMENTS_COUNT
            // }
            // translateRight(indexL);
        */
        moveDir.current !='r';

        calcIndexL();


        if (choosenElement + 1 < ELEMENTS_COUNT) {
            setChoosenElement(choosenElement + 1);
        }

        else {
            setChoosenElement(choosenElement + 1 - ELEMENTS_COUNT);
        }
    }

    return (<div className="tv-carousel" > <div className="tv-carousel-container" > <div className="tv-carousel-window" > <div className="tv-carousel-row" ref= {
            carousel
        }

        > {
            /* Можно ли использовать htmlELement для htmlDivElement??*/
        }

            {
            json_info.map(function (elementInfo) {
                    let id=elementInfo[0] as number;

                    return (<TVCarouselElement key= {
                            id
                        }

                        id= {
                            id
                        }

                        imageUrl= {
                            elementInfo[1] as string
                        }

                        carouselElementsRef= {
                            pushCarouselElements
                        }

                        filtersRef= {
                            pushFilters
                        }

                        />);
                })
        }

        </div> < /div> < /div> < button onClick= {
            handleLeftArrowClick
        }

        > left < /button> < button onClick= {
            handleRightArrowClick
        }

        > right < /button> < /div>);
}